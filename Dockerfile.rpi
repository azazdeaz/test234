FROM ubuntu:focal

# Disable GUI prompts
ENV DEBIAN_FRONTEND noninteractive

RUN apt update \
    && apt install -y \
        build-essential \
        apt-utils \ 
        && apt -qq clean

RUN apt update \
    && apt install -y \
        libboost-all-dev \
        cmake \
        && apt -qq clean

RUN apt update \
    && apt install -y \
        libtbb-dev \
        && apt -qq clean

RUN apt update \
    && apt install -y \
        git \
        && apt -qq clean

RUN apt update \
    && apt install -y \
        python3-pip \
        python3-dev \
    && apt -qq clean


# RUN apt-get -y update && apt-get -y install

# # Install C++
# RUN apt-get -y install build-essential  apt-utils

# # Install boost and cmake
# RUN apt-get -y install libboost-all-dev cmake

# # Install TBB
# RUN apt-get -y install libtbb-dev


# # Install git
# RUN apt-get update && \
#     apt-get install -y git

# # Install compiler
# RUN apt-get install -y build-essential

# Clone GTSAM (develop branch)
WORKDIR /usr/src/
RUN git clone --single-branch --branch develop https://github.com/borglab/gtsam.git

# Install pip
# RUN apt-get install -y python3-pip python3-dev

# Install python wrapper requirements
RUN python3 -m pip install -U -r /usr/src/gtsam/python/requirements.txt

# Change to build directory. Will be created automatically.
WORKDIR /usr/src/gtsam/build

RUN cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DGTSAM_WITH_EIGEN_MKL=OFF \
    -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
    -DGTSAM_BUILD_TIMING_ALWAYS=OFF \
    -DGTSAM_BUILD_TESTS=OFF \
    -DGTSAM_BUILD_PYTHON=ON \
    -DGTSAM_PYTHON_VERSION=3\
    ..

# Build
RUN make -j8 install
RUN make -j8 python-install
# RUN make clean

# Needed to link with GTSAM
RUN echo 'export LD_LIBRARY_PATH=/usr/local/lib:LD_LIBRARY_PATH' >> /root/.bashrc

# Needed to run python wrapper:
RUN echo 'export PYTHONPATH=/usr/local/python/:$PYTHONPATH' >> /root/.bashrc

# OpenCV
RUN python3 -m pip install numpy scipy --upgrade
RUN apt-get update \
    && apt-get install -y \
        libffi-dev \
        python3-opencv \
        curl \
    && apt-get -qq clean


# Python notebook dependencies
RUN python3 -m pip install notebook matplotlib tqdm ipywidgets --upgrade
RUN jupyter nbextension enable --py widgetsnbextension

#python hardver dependencies
RUN python3 -m pip install inputs --upgrade
RUN python3 -m pip install mpu6050-raspberrypi --upgrade
RUN python3 -m pip install pyzmq --upgrade
# RUN python3 -m pip install picamera --upgrade
RUN python3 -m pip install gpiozero --upgrade

# Zenoh
# RUN apt-get update \
#     && apt-get install -y \
#         curl \
#     && apt-get -qq clean
# RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
# ENV PATH="/root/.cargo/bin:${PATH}"
# RUN rustup default nightly
# RUN cargo install --git https://github.com/eclipse-zenoh/zenoh.git

# setup python venv
# RUN apt-get update \
#     && apt-get install -y \
#         python3-pip \
#         python3-dev \
#         python3-venv \
#     && apt-get -qq clean
# ENV VIRTUAL_ENV=/opt/venv
# RUN python3 -m venv $VIRTUAL_ENV
# ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# RUN python3 -m pip install maturin
# WORKDIR /zenoh-python
# RUN git clone https://github.com/eclipse-zenoh/zenoh-python.git .
# RUN maturin develop --release

# COPY . /catkin_ws/src
# WORKDIR /catkin_ws

# RUN rosdep update
# RUN rosdep install --from-paths src --ignore-src -r -y  || echo "There were some errors during rosdep install"
# SHELL ["/bin/bash", "-c"]
# RUN source /opt/ros/noetic/setup.bash && \
#     catkin_make
# RUN echo 'source /catkin_ws/devel/setup.bash' >> /root/.bashrc

# ENV WORLD_DIR=/catkin_ws/src/fields_ignition/generated_examples/tomato_field